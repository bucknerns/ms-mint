{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome MINT (Metabolomics Integrator) is an app for processing mzML and mzXML mass-spectrometry (MS) files in MS1 mode. Its main function is to sum up intensity values from (usually) pre-defined windows in m/z and scan-time (also called retention time) space. These windows can be provided in from of a peaklist-file or set programmatically. Therefore, a large number of MS-files can be processed in very standardized and reproducible manner. The tool can be used with a browser based graphical user interface (GUI) implemented as interactive dashboard with Plotly-Dash . A second (experimental) GUI is available that runs integrated in a Jupyter Notebook . Alternatively, the ms_mint package can be imported as python library to be integrated in any Python script and processing pipeline to automate MS-file processing. Installation With Anaconda (Miniconda) and PIP conda create -n ms-mint python=3.8 conda activate ms-mint pip install ms-mint Just PIP The program can be installed in a Python 3 (>= 3.7) environment using pip : pip install ms-mint From source in Anaconda environment (recommended for Windows) Here we use conda from the miniconda (or alternatively anaconda ) package to install dependencies in a virtual environment. git clone https://github.com/soerendip/ms-mint cd ms-mint conda create -n ms-mint python=3.8 conda activate ms-mint pip setup.py install # for regular install pip install -e . # for development Starting the browser based GUI The browser based GUI can then be started with conda activate ms-mint # if you run MINT in an Anaconda environment Mint.py Then navigate to the following ULR with your browser: http://localhost:9999/ . The graphical user interface is explained in more detail here Peaklists A peaklist is the protocol that captures how data is going to be extracted from the individual MS-files. It is provided as csv-file and essentially contains the definitions of peaks to be extracted. A single peak is defined by five properties that need to be present as headers in the csv-file which will be explained in the following: peak_label : A unique identifier such as the biomarker name or ID. Even if multiple peaklist files are used, the label have to be unique across all the files. mz_mean : The target mass (m/z-value) in [Da]. mz_width : The width of the peak in the m/z-dimension in units of ppm. The window will be mz_mean +/- (mz_width * mz_mean * 1e-6). Usually, a values between 5 and 10 are used. rt_min : The start of the retention time for each peak in [min]. rt_max : The end of the retention time for each peak in [min]. intensity_threshold : A threshold that is applied to filter noise for each window individually. Can be set to 0 or any positive value. Example file peaklist.csv: peak_label,mz_mean,mz_width,rt_min,rt_max,intensity_threshold Biomarker-A,151.0605,10,4.65,5.2,0 Biomarker-B,151.02585,10,4.18,4.53,0","title":"Home"},{"location":"#welcome","text":"MINT (Metabolomics Integrator) is an app for processing mzML and mzXML mass-spectrometry (MS) files in MS1 mode. Its main function is to sum up intensity values from (usually) pre-defined windows in m/z and scan-time (also called retention time) space. These windows can be provided in from of a peaklist-file or set programmatically. Therefore, a large number of MS-files can be processed in very standardized and reproducible manner. The tool can be used with a browser based graphical user interface (GUI) implemented as interactive dashboard with Plotly-Dash . A second (experimental) GUI is available that runs integrated in a Jupyter Notebook . Alternatively, the ms_mint package can be imported as python library to be integrated in any Python script and processing pipeline to automate MS-file processing.","title":"Welcome"},{"location":"#installation","text":"","title":"Installation"},{"location":"#with-anaconda-miniconda-and-pip","text":"conda create -n ms-mint python=3.8 conda activate ms-mint pip install ms-mint","title":"With Anaconda (Miniconda) and PIP"},{"location":"#just-pip","text":"The program can be installed in a Python 3 (>= 3.7) environment using pip : pip install ms-mint","title":"Just PIP"},{"location":"#from-source-in-anaconda-environment-recommended-for-windows","text":"Here we use conda from the miniconda (or alternatively anaconda ) package to install dependencies in a virtual environment. git clone https://github.com/soerendip/ms-mint cd ms-mint conda create -n ms-mint python=3.8 conda activate ms-mint pip setup.py install # for regular install pip install -e . # for development","title":"From source in Anaconda environment (recommended for Windows)"},{"location":"#starting-the-browser-based-gui","text":"The browser based GUI can then be started with conda activate ms-mint # if you run MINT in an Anaconda environment Mint.py Then navigate to the following ULR with your browser: http://localhost:9999/ . The graphical user interface is explained in more detail here","title":"Starting the browser based GUI"},{"location":"#peaklists","text":"A peaklist is the protocol that captures how data is going to be extracted from the individual MS-files. It is provided as csv-file and essentially contains the definitions of peaks to be extracted. A single peak is defined by five properties that need to be present as headers in the csv-file which will be explained in the following: peak_label : A unique identifier such as the biomarker name or ID. Even if multiple peaklist files are used, the label have to be unique across all the files. mz_mean : The target mass (m/z-value) in [Da]. mz_width : The width of the peak in the m/z-dimension in units of ppm. The window will be mz_mean +/- (mz_width * mz_mean * 1e-6). Usually, a values between 5 and 10 are used. rt_min : The start of the retention time for each peak in [min]. rt_max : The end of the retention time for each peak in [min]. intensity_threshold : A threshold that is applied to filter noise for each window individually. Can be set to 0 or any positive value.","title":"Peaklists"},{"location":"#example-file","text":"peaklist.csv: peak_label,mz_mean,mz_width,rt_min,rt_max,intensity_threshold Biomarker-A,151.0605,10,4.65,5.2,0 Biomarker-B,151.02585,10,4.18,4.53,0","title":"Example file"},{"location":"gui/","text":"The browser based GUI The app's frontend is build using Plotly-Dash and runs locally in a browser. Thought, the Python functions provided can be imported and used in any Python project independently. Select MS Files (mzXML or mzML) Individual files can be added to an in worklist using the ADD FILE(S) button. If the checkbox Add files from directory is checked, all files from a directory and its subdirectories are imported that end on mzXML or mzML (not yet supported). The box is checked by default. Note that files are always added to the worklist. The worklist can be cleared with the CLEAR FILES button, which has no effect on the selected peaklists. Select Peaklist A standard peaklist is provided. A user defined peaklist can be selected and used with the SELECT PEAKLIST FILE(S) button. Peaklists are explained in more detail here . Run MINT The number of cores used for MINT can be selected with the Select number of cores slider. The maximum number shown here depends on the computer on which MINT is running. The RUN button starts mint and a progress bar monitors the progress and can be used to estimate the remaining time. Interactive Table The results Heatmap Tool Peak View 3D-Peak View","title":"The GUI"},{"location":"gui/#the-browser-based-gui","text":"The app's frontend is build using Plotly-Dash and runs locally in a browser. Thought, the Python functions provided can be imported and used in any Python project independently.","title":"The browser based GUI"},{"location":"gui/#select-ms-files-mzxml-or-mzml","text":"Individual files can be added to an in worklist using the ADD FILE(S) button. If the checkbox Add files from directory is checked, all files from a directory and its subdirectories are imported that end on mzXML or mzML (not yet supported). The box is checked by default. Note that files are always added to the worklist. The worklist can be cleared with the CLEAR FILES button, which has no effect on the selected peaklists.","title":"Select MS Files (mzXML or mzML)"},{"location":"gui/#select-peaklist","text":"A standard peaklist is provided. A user defined peaklist can be selected and used with the SELECT PEAKLIST FILE(S) button. Peaklists are explained in more detail here .","title":"Select Peaklist"},{"location":"gui/#run-mint","text":"The number of cores used for MINT can be selected with the Select number of cores slider. The maximum number shown here depends on the computer on which MINT is running. The RUN button starts mint and a progress bar monitors the progress and can be used to estimate the remaining time.","title":"Run MINT"},{"location":"gui/#interactive-table","text":"The results","title":"Interactive Table"},{"location":"gui/#heatmap-tool","text":"","title":"Heatmap Tool"},{"location":"gui/#peak-view","text":"","title":"Peak View"},{"location":"gui/#3d-peak-view","text":"","title":"3D-Peak View"},{"location":"python/","text":"Python Integration ms-mint backend can be imported as a python object and used in a python script or interactively in a Jupyter notebook environment. from ms_mint import Mint from glob import glob Fist, a mint object has to be initiated: mint = Mint(verbose=False) One ore more peaklist files as well as mass-spec files have to be assigned to mint.peaklist_files and mint.files accordingly: mint.peaklist_files = ['path_to/peaklist-file.csv'] mint.files = glob('path_to/ms-files/*/**.mzML', recursive=True) Calling the peaklist() method displays the imported and concatenated peaklists: print(mint.peaklist) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv Then mint can be executed calling the run() method: mint.run() > Run MINT > Total runtime: 6.18s > Runtime per file: 3.09s > Runtime per peak (79): 0.04s The result will be stored in the results and the crosstab attributes: print(mint.results) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist peak_area ms_file ms_path file_size intensity_sum 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10","title":"Python API"},{"location":"python/#python-integration","text":"ms-mint backend can be imported as a python object and used in a python script or interactively in a Jupyter notebook environment. from ms_mint import Mint from glob import glob Fist, a mint object has to be initiated: mint = Mint(verbose=False) One ore more peaklist files as well as mass-spec files have to be assigned to mint.peaklist_files and mint.files accordingly: mint.peaklist_files = ['path_to/peaklist-file.csv'] mint.files = glob('path_to/ms-files/*/**.mzML', recursive=True) Calling the peaklist() method displays the imported and concatenated peaklists: print(mint.peaklist) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv Then mint can be executed calling the run() method: mint.run() > Run MINT > Total runtime: 6.18s > Runtime per file: 3.09s > Runtime per peak (79): 0.04s The result will be stored in the results and the crosstab attributes: print(mint.results) peak_label mz_mean mz_width rt_min rt_max intensity_threshold peaklist peak_area ms_file ms_path file_size intensity_sum 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10 0 1 151.06050 5 5.07 5.09 0 ./data/peaklist_v0.csv 2.879748e+03 ./data/test.mzXML ./data 14.201964 5.607296e+10 1 2 216.05040 5 3.98 4.39 0 ./data/peaklist_v0.csv 4.892307e+05 ./data/test.mzXML ./data 14.201964 5.607296e+10 2 3 115.00320 5 3.45 4.39 0 ./data/peaklist_v0.csv 3.916772e+07 ./data/test.mzXML ./data 14.201964 5.607296e+10 3 4 273.00061 5 1.10 2.22 0 ./data/peaklist_v0.csv 6.862484e+06 ./data/test.mzXML ./data 14.201964 5.607296e+10","title":"Python Integration"}]}